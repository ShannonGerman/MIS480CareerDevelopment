names
IDs
states
HR<-data.frame(names, ID, states)
HR<-data.frame(names, IDs, states)
HR
HR<-data.frame(names, IDs, states)
HR
HR[1,]
names<-c("Shannon", "Alicia", "Lori")
str(HR[1,2])
data("mtcars")
View(HR)
force(mtcars)
mean(mtcars$hp)
mode(mtcars$hp)
median(mtcars$hp)
mode(mtcars$hp)
table(mtcars$Pontiac Firebird)
str(mtcars)
str(?mtcars)
table(mtcars$am)
aggregate(am$mtcars)
aggregate(am, data=mtcars)
aggregate(am, data=mtcars, FUN=function(x)[NROW(x)])
count(am$mtars)
count(am$mtcars)
count(mtcars$am)
count(mtcars$am)
mtcars$am <- as.factor(mtcars$am)
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) <-c("AT", "MT")
table(mtcars$am)
pie(tab2,
col = c("lightblue","red"),
labels = pielabels,
main = '# of cars by Transmission (am)',
cex = 1.1)
pie(
+     col = c("lightblue","red"),
am.type table(mtcars$am)
ggplot(mtcars, aes(x = factor(am))) +
geom_bar()
plot(mtcars, aes(x =factor(am))) +geom_bar()
plot(mtcars, aes(x = factor(am))) +
+     geom_bar()
boxplot.matrix(mtcars$am)
boxplot.(mtcars$am)
boxplot(mtcars$am)
boxplot(mtcars$drat)
# vector of bar heights
height <- table(mtcars$am)
# Make a vector of the names of the bars called "barnames"
barnames <- c("automatic","manual")
# Label the y axis "number of cars" and label the bars using barnames
barplot(height, ylab = "number of cars", names.arg = barnames)
height <- table(mtcars$am)
barnames <- c("automatic","manual")
barplot(height, ylab = "number of cars", names.arg = barnames)
hist(am$mtcars),
his(mtcars$am),
hist(mtcars$am),
hist(mtcars$am,
main="Dsitrubution of Transmission",
xlab = "Transmission Type",
ylab = "Frequency",
breaks = 20, #20 bins
xlim - c(0,500),
col= "red", #fill color
border ="White") #border color
main="Dsitrubution of Transmission",
hist(mtcars$am,
main ="Distrubution of Transmission",
xlab = "AM",
ylab = "Frequency",
breaks = 20, #20 bins
xlim - c(0,500),
col= "red", #fill color
border ="White") #border color
hist(mtcars$am,
main ="Distrubution of Transmission",
xlab = "Number of Cars",
ylab = "Frequency",
breaks = 20, #20 bins
xlim - c(0,500),
col= "red", #fill color
border ="White") #border color
hist(mtcars$am,
main ="Distrubution of Transmission",
xlab = "Number of Cars",
ylab = "Frequency",
breaks = 20, #20 bins
xlim - c(0,500),
col= "red", #fill color
border ="White") #border color
g <- ggplot(data = mtcars, aes(x=am, y=hp), draw_quantiles=TRUE)
plot(data = mtcars, aes(x=am, y=hp), draw_quantiles=TRUE)
hist(mtcars$hp,
col='steelblue',
main='Histogram',
xlab='hp',
ylab='Frequency')
color = "red"
height <- table(mtcars$am)
color = "red"
> barnames <- c("automatic","manual")
height <- table(mtcars$am)
height <- table(mtcars$am)
> barnames <- c("automatic","manual")
data(cars)
force(cars)
cor(cars$speed, cars$dist)
plot(cars$speed, cars$dist)
# Add a red title and a blue subtitle. Make x and y
# labels 25% smaller than the default and green.
title(main="Dist/Speed", col.main="red",
sub="My Sub-title", col.sub="blue",
xlab="My X label", ylab="My Y label",
col.lab="green", cex.lab=0.75)
plot(cars$speed, cars$dist)
plot(cars$speed, cars$dist)
title(main="Dist/Speed", col.main="red",
sub="My Sub-title", col.sub="blue",
xlab="My X label", ylab="My Y label",
col.lab="green", cex.lab=0.75)
plot(cars$speed, cars$dist)
title(main="Dist/Speed", col.main="red",
xlab="Speed", ylab="Distance",
col.lab="green", cex.lab=0.75)
plot(cars$speed, cars$dist)
title(main="Dist/Speed", col.main="red",
xlab="Speed", ylab="Distance" col.xlab="green"
plot(cars$speed, cars$dist)
title(main="Dist/Speed", col.main="red",
xlab="Speed", ylab="Distance", col.xlab="green"
plot(cars$speed, cars$dist)
plot(cars$speed, cars$dist)
title(main="Dist/Speed", col.main="red",
attach(cars)
plot(cars$speed, cars$dist, main="Speed/Distance",
plot(cars$speed, cars$dist, main="Speed/Distance",
plot(wt, mpg, main="Milage vs. Car Weight",
xlab="Speed", ylab="Dist", pch=18, col="blue")
text(wt, mpg, row.names(cars), cex=0.6, pos=4, col="red")
plot(cars$speed, cars$dist, main="Speed/Distance",
plot(wt, mpg, main="Milage vs. Car Weight",
xlab="speed", ylab="dist", pch=18, col="blue")
text(wt, mpg, row.names(cars), cex=0.6, pos=4, col="red")
plot(cars$speed, cars$dist, main="Speed/Distance",
plot(speed, dist main="Speed vs. Dist",
plot(cars$speed, cars$dist, main="Speed/Distance",
xlab="speed", ylab="dist", pch=18, col="blue")
text(speed, dist, row.names(cars), cex=0.6, pos=4, col="red")
plot(cars$speed, cars$dist, main="Speed/Distance",
xlab="speed", ylab="dist", pch=18, col="blue")
text(dist, row.names(cars), cex=0.6, pos=4, col="red")
plot(cars$speed, cars$dist, main="Speed/Distance",
xlab="speed", ylab="dist", pch=18, col="blue")
round(cor(car),
digits = 2 # rounded to 2 decimals
)
round(cor(dat),
digits = 2 # rounded to 2 decimals
)
round(cor(dat$car),
digits = 2 # rounded to 2 decimals
)
ggscatterstats(
data = cars,
x = speed,
y = dist,
bf.message = FALSE,
marginal = FALSE # remove histograms
round(cor(dat$cars),
round(cor(dat$cars),
digits = 2 # rounded to 2 decimals
)
round(cor(dat$cars),
digits = 2 # rounded to 2 decimals
)
ggscatterstats(
data = cars,
x = wt,
y = mpg,
bf.message = FALSE,
marginal = FALSE # remove histograms
round(cor(data(cars)),
round(cor(data(cars)),
digits = 2 # rounded to 2 decimals
)
round(cor(data(cars)),
digits = 2 # rounded to 2 decimals
)
round(cor(data(cars)),
x = speed,
y = dist,
digits = 2 # rounded to 2 decimals
)
round(cor(cars)),
cor(cars$speed, cars$dist,
method = "spearman"
)
cor.test(cars$speed, cars$dist,
method = "spearman")
cor.test(cars$speed, cars$dist,
method = "spearman",
exact=FALSE)
spearman.plot(cbind(x,y), col="red", lhist=50)
spearman.plot(cbind(x,y), col="red", lhist=50)
spearman.plot(cars(x,y), col="red", lhist=50)
spearman.plot((cbind(x,y), col="red", lhist=50)
spearman.plot((cars(x,y), col="red", lhist=50)
plot(cars$speed, cars$dist, xlab="Speed, ylab="Distance")
abline(lm(dist))
plot(cars$speed, cars$dist, xlab="Speed, ylab="Distance")
plot(cars$speed, cars$dist, xlab="Speed, ylab="Distance")
View(cars)
spearman.plot(x=iris$Sepal.Length, y=iris$Sepal.Width)
plot(cars$speed, cars$dist, xlab="Speed, ylab="Distance")
plot(cars$speed, cars$dist, xlab="Speed", ylab="Distance")
abline(lm(dist))
plot(cars$speed, cars$dist, xlab="Speed", ylab="Distance",
abline(lm(dist))
plot(cars$speed, cars$dist, xlab="Speed", ylab="Distance",
plot(cars$speed, cars$dist, xlab="Speed", ylab="Distance",
+ abline(lm(dist))
par(mgp=c(2,1,0), mar=c(3,3,1,1))
par(mgp=c(2,1,0), mar=c(3,3,1,1))
# Fit regression line
require(stats)
reg<-lm(dist ~ speed, data = cars)
coeff=coefficients(reg)
# equation of the line :
eq = paste0("y = ", round(coeff[2],1), "*x ", round(coeff[1],1))
# plot
plot(cars, main=eq)
abline(reg, col="blue")
library(readr)
MIS470JNJ <- read_csv("MIS470JNJ.csv")
View(MIS470JNJ)
View(MIS470JNJ)
View(MIS470JNJ)
setwd("/Users/p491623/Dekstop")
setwd("Users/p491623/PJM410-1")
library(readr)
MIS470JNJ <- read_csv("MIS470JNJ.csv")
View(MIS470JNJ)
library(readxl)
MIS470JNJ <- read_excel("C:/Users/p491623/Desktop/MIS470JNJ.csv")
View(MIS470JNJ)
my_data<<- read_excel("C:/Users/p491623/Desktop/MIS470JNJ.csv", header=TRUE)// the dataframe is called my_data
View(MIS470JNJ)
> library(readxl)
View(MIS470JNJ)
> library(readxl)
MIS470JNJ <- read_excel("C:/Users/p491623/Desktop/MIS470JNJ.csv")
> View(MIS470JNJ)
telco <- read.csv("MIS470Telcocustomer.csv", stringsAsFactors = TRUE)
library(readr)
MIS470Telcocustomer <- read_csv("MIS470Telcocustomer.csv")
View(MIS470Telcocustomer)
telco <- read.csv("MIS470Telcocustomer.csv", stringsAsFactors = TRUE)
# uncomment install.packages("caret") if already installed
# install.packages("caret")
library(caret)
# Prep data. Partition data into training and testing partitions
intrain<- createDataPartition(telco$Churn,p=0.7,list=FALSE)
set.seed(2017)
training<- telco[intrain,]
testing<- telco[-intrain,]
# Create a Logistic Model for Churn with training data
LogModel <-glm(Churn ~ .,family=binomial(link="logit"),data=training)
# Evaluate model with testing data
testing$Churn <- as.character(testing$Churn)
testing$Churn[testing$Churn=="No"] <- "0"
testing$Churn[testing$Churn=="Yes"] <- "1"
fitted.results <- predict(LogModel,newdata=testing,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != testing$Churn)
summary(LogModel)
misClasificError
library(readr)
CRCA_Business_Partners <- read_csv("CRCA-Business Partners.csv")
View(CRCA_Business_Partners)
mydata=(CRCA_Business_Partners)
sort(unique(mydata$`Business Partner`))
unique(df)
unique(my_data)
unique(mydata)
sort(unique(mydata$Function))
sort(unique(mydata$State))
duplicated(mydata)
duplicated(mydata=FALSE)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
df2 <- df %>% distinct()
library(dplyr)
df2 <- df %>% distinct(mydata)
library(dplyr)
df2 <- df %>% distinct("Business Partner","function", "State")
distinct(mydata, .keep_all = TRUE)
for (ii in unique(mydata)) {
plt <- ggplot(data %>% filter(ID == ii),
aes(x = "Business Partner",
y = "State")) +
geom_point(color = "dodgerblue3") +
theme_minimal()
print(plt)
)
summar(mydata)
summary(mydata)
barplot(unique(mydata$`Business Partner`))
pie(mydata$`Business Partner`, labesl)
library(tidyr)
library(ggplot2)
dat.g <- gather(dat, type, value, -Business Partner)
library(tidyr)
library(ggplot2)
dat.g <- gather(dat, type, value, Business Partner)
plot(mydata$`Business Partner`, mydata$Function)
ggplot((mydata$`Business Partner`))
plot(mydata$`Business Partner`, mydata$State)
library(readr)
CRCA_Business_Partners <- read_csv("CRCA-Business Partners.csv")
View(CRCA_Business_Partners)
mydata=(CRCA_Business_Partners)
unique(mydata, incomparables = FALSE)
plot(mydata$Title,mydata$`Region/Area`)
hist(mydata$Title, mydata$`Region/Area`)
hist(mydata$`Region/Area`, mydata$Title)
library(readr)
CRCA_Business_Partners <- read_csv("CRCA-Business Partners.csv")
View(CRCA_Business_Partners)
mydata=(CRCA_Business_Partners)
plot(mydata$State, mydata$`Business Partner`)
hist(mydata$State, mydata$`Business Partner`)
library(readr)
CRCA_Business_Partners <- read_csv("CRCA-Business Partners.csv")
View(CRCA_Business_Partners)
mydata=(CRCA_Business_Partners)
plot(mydata$State, mydata$`Business Partner`)
hist(mydata$State,mydata$`Business Partner`)
library(readr)
CRCA_Business_Partners <- read_csv("CRCA-Business Partners.csv")
View(CRCA_Business_Partners)
mydata=(CRCA_Business_Partners)
hist(mydata$State, mydata$`Business Partner`)
pie(mydata$State, mydata$`Business Partner`)
pie(mydata$`Business Partner`, mydata$State)
library(ggplot2)
ggplot(data=as.data.frame(mydata$State),
aes(x = factor(1),fill = factor(mydata$State))) +
geom_bar(stat = "count") +
scale_y_continuous(breaks = seq(0,12,3), labels = c("0", "25%", "50%", "75%", "100%")) +
coord_polar(theta='y') +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.x = element_blank()) +
labs(fill = "State")
sort(unique(mydata$`Business Partner`
))
count(unique(mydata$`Business Partner`
))
count.fields(mydata$`Business Partner`)
count(mydata$`Business Partner`)
count_fields(mydata$`Business Partner`)
sort(unique(mydata$`Business Partner`
+           ))
sort(unique(mydata$`Business Partner`
))
getwd()
telco <- read.csv("MIS470Telcocustomer.csv", stringsAsFactors = TRUE)
str(telco)
# uncomment install.packages("caret") if already installed
# install.packages("caret")
library(caret)
# Prep data. Partition data into training and testing partitions
intrain<- createDataPartition(telco$Churn,p=0.7,list=FALSE)
set.seed(2017)
training<- telco[intrain,]
testing<- telco[-intrain,]
# Create a Logistic Model for Churn with training data
LogModel <-glm(Churn ~ .,family=binomial(link="logit"),data=training)
summary(model)
getwd()
telco <- read.csv("MIS470Telcocustomer.csv", stringsAsFactors = TRUE)
str(telco)
# uncomment install.packages("caret") if already installed
# install.packages("caret")
library(caret)
# Prep data. Partition data into training and testing partitions
intrain<- createDataPartition(telco$Churn,p=0.7,list=FALSE)
set.seed(2017)
training<- telco[intrain,]
testing<- telco[-intrain,]
# Create a Logistic Model for Churn with training data
LogModel <-glm(Churn ~ .,family=binomial(link="logit"),data=training)
summary(logmodel)
getwd()
telco <- read.csv("MIS470Telcocustomer.csv", stringsAsFactors = TRUE)
str(telco)
# uncomment install.packages("caret") if already installed
# install.packages("caret")
library(caret)
# Prep data. Partition data into training and testing partitions
intrain<- createDataPartition(telco$Churn,p=0.7,list=FALSE)
set.seed(2017)
training<- telco[intrain,]
testing<- telco[-intrain,]
# Create a Logistic Model for Churn with training data
LogModel <-glm(Churn ~ .,family=binomial(link="logit"),data=training)
summary(LogModel)
# Evaluate model with testing data
testing$Churn <- as.character(testing$Churn)
testing$Churn[testing$Churn=="No"] <- "0"
testing$Churn[testing$Churn=="Yes"] <- "1"
fitted.results <- predict(LogModel,newdata=testing,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != testing$Churn)
# TO DO
# 1. calculate and print out logistic model accuracy using misClasificError variable
# 2. Display a confusion matric using the table() function
# 3. Create and evaluate the performance of 3 logistic models
#    using the three (3) most significant predictors
#    (either individual or collectively)
#
library(readr)
MIS470Telcocustomer <- read_csv("MIS470Telcocustomer.csv")
View(MIS470Telcocustomer)
getwd()
telco <- read.csv("MIS470Telcocustomer.csv", stringsAsFactors = TRUE)
str(telco)
# uncomment install.packages("caret") if already installed
# install.packages("caret")
library(caret)
# Prep data. Partition data into training and testing partitions
intrain<- createDataPartition(telco$Churn,p=0.7,list=FALSE)
set.seed(2017)
training<- telco[intrain,]
testing<- telco[-intrain,]
# Create a Logistic Model for Churn with training data
LogModel <-glm(Churn ~ .,family=binomial(link="logit"),data=training)
summary(LogModel)
# Evaluate model with testing data
testing$Churn <- as.character(testing$Churn)
testing$Churn[testing$Churn=="No"] <- "0"
testing$Churn[testing$Churn=="Yes"] <- "1"
fitted.results <- predict(LogModel,newdata=testing,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != testing$Churn)
# TO DO
# 1. calculate and print out logistic model accuracy using misClasificError variable
# 2. Display a confusion matric using the table() function
# 3. Create and evaluate the performance of 3 logistic models
#    using the three (3) most significant predictors
#    (either individual or collectively)
#
misClasificError
table(testing$Churn, fitted.results)
LogModel1 <-glm(Churn ~ Contract + PaperlessBilling + tenure_group, family=binomial(link="logit"), data=training)/
summary(LogModel1)/
testing$Churn <- as.character(testing$Churn)
table(testing$Churn, fitted.results)
LogModel1 <-glm(Churn ~ Contract + PaperlessBilling + tenure_group, family=binomial(link="logit"), data=training)/
summary(LogModel1)/
testing$Churn <- as.character(testing$Churn)
LogModel1 <-glm(Churn~ Contract + PaperlessBilling + tenure_group, family=binomial(link="logit"), data=training)/
summary(LogModel1)/
testing$Churn <- as.character(testing$Churn)
LogModel1 <-glm(Churn ~ ContractOne year + ContractTwo year + PaperlessBillingYes, family=binomial(link="logit"), data=training)
LogModel1 <-glm(Churn~ ContractOne year + ContractTwo year + PaperlessBillingYes, family=binomial(link="logit"), data=training)
LogModel1 <-glm(Churn~ Contract + PaperlessBillingYes, family=binomial(link="logit"), data=training)/
summary(LogModel1)/
testing$Churn <- as.character(testing$Churn)
LogModel1 <-glm(Churn~ Contract + PaperlessBillingYes, family=binomial(link="logit"), data=training)/
summary(LogModel1)
LogModel1 <-glm(Churn~ Contract + PaperlessBilling, family=binomial(link="logit"), data=training)/
summary(LogModel1)
LogModel1 <-glm(Churn~ Contract + PaperlessBilling, family=binomial(link="logit"), data=training)
summary(LogModel1)
LogModel1 <-glm(Churn~ Contract + PaperlessBilling + tenure_group, family=binomial(link="logit"), data=training)
summary(LogModel1)
testing$Churn <- as.character(testing$Churn)
testing$Churn[testing$Churn=="No"] <- "0"
testing$Churn[testing$Churn=="Yes"] <- "1"
fitted.results <- predict(LogModel1,newdata=testing,type='response')/
fitted.results <- ifelse(fitted.results > 0.5,1,0)
testing$Churn <- as.character(testing$Churn)
testing$Churn[testing$Churn=="No"] <- "0"
testing$Churn[testing$Churn=="Yes"] <- "1"
fitted.results <- predict(LogModel1,newdata=testing,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
testing$Churn <- as.character(testing$Churn)
testing$Churn[testing$Churn=="No"] <- "0"
testing$Churn[testing$Churn=="Yes"] <- "1"
fitted.results <- predict(LogModel1,newdata=testing,type='response')
testing$Churn <- as.character(testing$Churn)
testing$Churn[testing$Churn=="No"] <- "0"
testing$Churn[testing$Churn=="Yes"] <- "1"
fitted.results <- predict(LogModel1,newdata=testing,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
testing$Churn <- as.character(testing$Churn)
testing$Churn[testing$Churn=="No"] <- "0"
testing$Churn[testing$Churn=="Yes"] <- "1"
fitted.results <- predict(LogModel1,newdata=testing,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != testing$Churn)
misClasificError
table(testing$Churn, fitted.results)
